"""
Composants UI pour l'analyse des voies d'administration
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from config.logging_config import get_logger
from ui.styles import create_metric_card, create_status_message

logger = get_logger(__name__)

def display_administration_route_section(route_result: Dict):
    """
    Affiche la section compl√®te d'analyse des voies d'administration
    
    Args:
        route_result: R√©sultat de l'analyse des voies d'administration
    """
    if not route_result or 'administration_route_analysis' not in route_result:
        st.warning("Aucune donn√©e sur les voies d'administration disponible")
        return
    
    route_data = route_result['administration_route_analysis']
    stats = route_result['stats']
    
    # En-t√™te de section
    st.markdown("### üíâ Voie d'administration inappropri√©e")
    
    # V√©rifier s'il y a des probl√®mes
    if stats['total_issues'] == 0:
        create_status_message(
            "‚úÖ Aucun probl√®me de voie d'administration d√©tect√© dans cette prescription",
            "success"
        )
        
        # Afficher quand m√™me les m√©dicaments avec voie appropri√©e s'il y en a
        if stats.get('voie_appropriee_count', 0) > 0:
            st.info(f"üìã {stats['voie_appropriee_count']} m√©dicament(s) avec voie d'administration appropri√©e")
            _display_appropriate_routes(route_data.get('voie_appropriee', []))
        return
    
    # Alerte si probl√®mes critiques
    if stats.get('has_critical_issues', False):
        create_status_message(
            f"üö® {stats['total_issues']} probl√®me(s) de voie d'administration d√©tect√©(s) - Gravit√© √©lev√©e pr√©sente",
            "error"
        )
    else:
        create_status_message(
            f"‚ö†Ô∏è {stats['total_issues']} probl√®me(s) de voie d'administration d√©tect√©(s)",
            "warning"
        )
    
    # M√©triques des voies d'administration
    display_route_metrics(stats)
    
    # Graphiques des voies d'administration
    display_route_charts(route_data, stats)
    
    # Tableau d√©taill√©
    display_route_table(route_data)
    
    # Chronologie d'administration (sp√©cifique aux voies d'administration)
    
    # Recommandations
    display_route_recommendations(route_data)

def _display_appropriate_routes(appropriate_routes: List[Dict]):
    """
    Affiche les m√©dicaments avec voie d'administration appropri√©e
    
    Args:
        appropriate_routes: Liste des m√©dicaments avec voie appropri√©e
    """
    if not appropriate_routes:
        return
    
    with st.expander("Voir les voies d'administration appropri√©es", expanded=False):
        for item in appropriate_routes:
            medicament = item.get('medicament', 'Inconnu')
            voie = item.get('voie_prescrite', 'Non sp√©cifi√©e')
            commentaire = item.get('commentaire', 'Voie appropri√©e')
            
            st.markdown(f"‚úÖ **{medicament}** ({voie}): {commentaire}")

def display_route_metrics(stats: Dict):
    """
    Affiche les m√©triques des voies d'administration
    
    Args:
        stats: Statistiques des voies d'administration
    """
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        total_meds = stats.get('total_medications', 0)
        create_metric_card(
            "M√©dicaments analys√©s", 
            str(total_meds)
        )
    
    with col2:
        inappropriee_count = stats.get('voie_inappropriee_count', 0)
        create_metric_card(
            "Voies inappropri√©es", 
            str(inappropriee_count)
        )
    
    with col3:
        incompatible_count = stats.get('voie_incompatible_count', 0)
        create_metric_card(
            "Incompatibilit√©s", 
            str(incompatible_count)
        )
    
    with col4:
        risquee_count = stats.get('voie_risquee_count', 0)
        create_metric_card(
            "Voies risqu√©es", 
            str(risquee_count)
        )
    
    with col5:
        total_issues = stats.get('total_issues', 0)
        create_metric_card(
            "Total probl√®mes", 
            str(total_issues)
        )

def display_route_charts(route_data: Dict, stats: Dict):
    """
    Affiche les graphiques d'analyse des voies d'administration
    
    Args:
        route_data: Donn√©es d'analyse des voies d'administration
        stats: Statistiques calcul√©es
    """
    # V√©rifier s'il y a des donn√©es √† afficher
    if stats.get('total_issues', 0) == 0 and stats.get('voie_appropriee_count', 0) == 0:
        st.info("Aucune donn√©e √† visualiser")
        return
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Graphique en camembert : r√©partition des types de probl√®mes
        fig_pie = create_route_pie_chart(stats)
        if fig_pie:
            st.plotly_chart(fig_pie, use_container_width=True)
        else:
            st.info("Graphique de r√©partition non disponible")
    
    with col2:
        # Graphique en barres : r√©partition par gravit√©
        fig_bar = create_route_severity_chart(stats)
        if fig_bar:
            st.plotly_chart(fig_bar, use_container_width=True)
        else:
            st.info("Graphique de gravit√© non disponible")

def create_route_pie_chart(stats: Dict) -> Optional[go.Figure]:
    """
    Cr√©e un graphique en camembert pour les types de probl√®mes de voies d'administration
    
    Args:
        stats: Statistiques des voies d'administration
        
    Returns:
        Figure Plotly ou None
    """
    try:
        # Pr√©parer les donn√©es
        labels = []
        values = []
        colors = []
        
        inappropriee_count = stats.get('voie_inappropriee_count', 0)
        incompatible_count = stats.get('voie_incompatible_count', 0)
        risquee_count = stats.get('voie_risquee_count', 0)
        appropriee_count = stats.get('voie_appropriee_count', 0)
        
        if inappropriee_count > 0:
            labels.append('Voie inappropri√©e')
            values.append(inappropriee_count)
            colors.append('#DC3545')  # Rouge
        
        if incompatible_count > 0:
            labels.append('Incompatibilit√©') 
            values.append(incompatible_count)
            colors.append('#E83E8C')  # Rose
        
        if risquee_count > 0:
            labels.append('Voie risqu√©e')
            values.append(risquee_count)
            colors.append('#FD7E14')  # Orange
        
        if appropriee_count > 0:
            labels.append('Voie appropri√©e')
            values.append(appropriee_count)
            colors.append('#28A745')  # Vert
        
        if not values:
            return None
        
        # Cr√©er le graphique
        fig = go.Figure(data=[go.Pie(
            labels=labels,
            values=values,
            marker_colors=colors,
            hole=0.3,
            textinfo='label+value+percent',
            textfont_size=12
        )])
        
        fig.update_layout(
            title="R√©partition des probl√®mes de voies d'administration",
            showlegend=True,
            margin=dict(t=50, b=0, l=0, r=0)
        )
        
        return fig
        
    except Exception as e:
        logger.error(f"Error creating route pie chart: {e}")
        return None

def create_route_severity_chart(stats: Dict) -> Optional[go.Figure]:
    """
    Cr√©e un graphique en barres pour la gravit√© des probl√®mes
    
    Args:
        stats: Statistiques des voies d'administration
        
    Returns:
        Figure Plotly ou None
    """
    try:
        gravite_data = stats.get('gravite_repartition', {})
        
        # S'assurer que toutes les cl√©s existent
        gravite_data = {
            'Faible': gravite_data.get('Faible', 0),
            'Mod√©r√©e': gravite_data.get('Mod√©r√©e', 0),
            '√âlev√©e': gravite_data.get('√âlev√©e', 0)
        }
        
        # Filtrer les valeurs non nulles
        labels = [k for k, v in gravite_data.items() if v > 0]
        values = [v for v in gravite_data.values() if v > 0]
        
        if not values:
            return None
        
        # Couleurs selon la gravit√©
        color_map = {
            'Faible': '#28A745',
            'Mod√©r√©e': '#FD7E14', 
            '√âlev√©e': '#DC3545'
        }
        colors = [color_map.get(label, '#6C757D') for label in labels]
        
        # Cr√©er le graphique
        fig = go.Figure(data=[go.Bar(
            x=labels,
            y=values,
            marker_color=colors,
            text=values,
            textposition='auto'
        )])
        
        fig.update_layout(
            title="Gravit√© des probl√®mes de voies d'administration",
            xaxis_title="Niveau de gravit√©",
            yaxis_title="Nombre de probl√®mes",
            margin=dict(t=50, b=50, l=50, r=50)
        )
        
        return fig
        
    except Exception as e:
        logger.error(f"Error creating route severity chart: {e}")
        return None

def display_route_table(route_data: Dict):
    """
    Affiche le tableau d√©taill√© des probl√®mes de voies d'administration
    
    Args:
        route_data: Donn√©es d'analyse des voies d'administration
    """
    st.markdown("#### D√©tail des probl√®mes de voies d'administration")
    
    # Pr√©parer les donn√©es pour le tableau
    table_data = []
    
    # Ajouter les voies inappropri√©es
    for item in route_data.get('voie_inappropriee', []):
        table_data.append({
            'M√©dicament': item.get('medicament', 'Inconnu'),
            'Type': 'Voie inappropri√©e',
            'Voie prescrite': item.get('voie_prescrite', 'Non sp√©cifi√©e'),
            'Voie recommand√©e': item.get('voie_recommandee', 'Non sp√©cifi√©e'),
            'Gravit√©': item.get('gravite', 'Faible'),
            'Justification': item.get('justification', 'Non sp√©cifi√©e'),
            'Recommandation': item.get('recommandation', '')
        })
    
    # Ajouter les voies incompatibles
    for item in route_data.get('voie_incompatible', []):
        table_data.append({
            'M√©dicament': item.get('medicament', 'Inconnu'),
            'Type': 'Incompatibilit√©',
            'Voie prescrite': item.get('voie_prescrite', 'Non sp√©cifi√©e'),
            'Voie recommand√©e': item.get('voie_recommandee', 'Non sp√©cifi√©e'),
            'Gravit√©': item.get('gravite', 'Faible'),
            'Justification': item.get('justification', 'Non sp√©cifi√©e'),
            'Recommandation': item.get('recommandation', '')
        })
    
    # Ajouter les voies risqu√©es
    for item in route_data.get('voie_risquee', []):
        table_data.append({
            'M√©dicament': item.get('medicament', 'Inconnu'),
            'Type': 'Voie risqu√©e',
            'Voie prescrite': item.get('voie_prescrite', 'Non sp√©cifi√©e'),
            'Voie recommand√©e': item.get('voie_recommandee', 'Non sp√©cifi√©e'),
            'Gravit√©': item.get('gravite', 'Faible'),
            'Justification': item.get('justification', 'Non sp√©cifi√©e'),
            'Recommandation': item.get('recommandation', '')
        })
    
    if not table_data:
        st.info("Aucun probl√®me de voie d'administration d√©tect√©")
        return
    
    # Cr√©er le DataFrame
    df = pd.DataFrame(table_data)
    
    # Ajouter un filtre par type si plusieurs types pr√©sents
    types_disponibles = df['Type'].unique().tolist()
    if len(types_disponibles) > 1:
        col1, col2 = st.columns([3, 1])
        with col2:
            filtre_type = st.selectbox(
                "Filtrer par type:",
                ['Tous'] + types_disponibles,
                key="route_filter"
            )
        
        if filtre_type != 'Tous':
            df = df[df['Type'] == filtre_type]
    
    # Afficher le tableau
    st.dataframe(df, use_container_width=True)
    
    # Informations suppl√©mentaires
    st.caption(f"Total: {len(table_data)} probl√®me(s) de voie d'administration")

def display_route_recommendations(route_data: Dict):
    """
    Affiche les recommandations pour les probl√®mes de voies d'administration
    
    Args:
        route_data: Donn√©es d'analyse des voies d'administration
    """
    st.markdown("#### üí° Recommandations")
    
    # Collecter toutes les recommandations
    recommendations = []
    
    # Recommandations pour voies inappropri√©es
    for item in route_data.get('voie_inappropriee', []):
        if item.get('recommandation'):
            recommendations.append({
                'type': 'Voie inappropri√©e',
                'medicament': item.get('medicament', 'Inconnu'),
                'recommandation': item.get('recommandation'),
                'gravite': item.get('gravite', 'Faible')
            })
    
    # Recommandations pour incompatibilit√©s
    for item in route_data.get('voie_incompatible', []):
        if item.get('recommandation'):
            recommendations.append({
                'type': 'Incompatibilit√©',
                'medicament': item.get('medicament', 'Inconnu'),
                'recommandation': item.get('recommandation'),
                'gravite': item.get('gravite', 'Faible')
            })
    
    # Recommandations pour voies risqu√©es
    for item in route_data.get('voie_risquee', []):
        if item.get('recommandation'):
            recommendations.append({
                'type': 'Voie risqu√©e',
                'medicament': item.get('medicament', 'Inconnu'),
                'recommandation': item.get('recommandation'),
                'gravite': item.get('gravite', 'Faible')
            })
    
    if not recommendations:
        st.info("Aucune recommandation sp√©cifique pour les voies d'administration")
        _display_general_route_recommendations()
        return
    
    # Trier par gravit√© (√âlev√©e en premier)
    severity_order = {'√âlev√©e': 3, 'Mod√©r√©e': 2, 'Faible': 1}
    recommendations.sort(key=lambda x: severity_order.get(x['gravite'], 0), reverse=True)
    
    # Afficher les recommandations sp√©cifiques
    st.markdown("##### Recommandations sp√©cifiques:")
    for i, rec in enumerate(recommendations, 1):
        gravite = rec['gravite']
        medicament = rec['medicament']
        type_prob = rec['type']
        recommandation = rec['recommandation']
        
        if gravite == '√âlev√©e':
            st.error(f"üö® **{medicament}** ({type_prob}): {recommandation}")
        elif gravite == 'Mod√©r√©e':
            st.warning(f"‚ö†Ô∏è **{medicament}** ({type_prob}): {recommandation}")
        else:
            st.info(f"üí° **{medicament}** ({type_prob}): {recommandation}")
    
    # Recommandations g√©n√©rales
    _display_general_route_recommendations()

def _display_general_route_recommendations():
    """Affiche les recommandations g√©n√©rales pour les voies d'administration"""
    st.markdown("##### Recommandations g√©n√©rales:")
    st.markdown("""
    - **Validation pharmaceutique** avant administration par voie intraveineuse
    - **Respect des d√©bits** d'administration recommand√©s
    - **Formation du personnel** aux bonnes pratiques d'administration
    - **Surveillance √©troite** lors des administrations par voies risqu√©es
    - **Suivi des param√®tres cliniques** pendant et apr√®s l'administration
    - **Documentation compl√®te** des modalit√©s d'administration dans le dossier patient
    - **Mat√©riel adapt√©** selon la voie d'administration (filtres, pompes, etc.)
    """)

def get_administration_route_summary_for_overview(route_result: Dict) -> Dict:
    """
    Retourne un r√©sum√© de l'analyse des voies d'administration pour la vue d'ensemble
    
    Args:
        route_result: R√©sultat de l'analyse des voies d'administration
        
    Returns:
        Dictionnaire avec r√©sum√© pour vue d'ensemble
    """
    if not route_result or 'stats' not in route_result:
        return {
            'status': 'no_data',
            'message': 'Pas de donn√©es de voies d\'administration',
            'color': 'secondary',
            'icon': '‚ùì',
            'count': 0
        }
    
    stats = route_result['stats']
    total_issues = stats.get('total_issues', 0)
    has_critical = stats.get('has_critical_issues', False)
    total_meds = stats.get('total_medications', 0)
    
    if total_issues == 0:
        return {
            'status': 'ok',
            'message': 'Voies appropri√©es',
            'color': 'success',
            'icon': '‚úÖ',
            'count': total_meds
        }
    elif has_critical:
        return {
            'status': 'critical',
            'message': f"{total_issues} probl√®me(s) critique(s)",
            'color': 'error',
            'icon': 'üö®',
            'count': total_issues
        }
    else:
        return {
            'status': 'warning',
            'message': f"{total_issues} probl√®me(s) de voie",
            'color': 'warning', 
            'icon': '‚ö†Ô∏è',
            'count': total_issues
        }

def create_administration_route_metrics_for_overview(route_result: Dict) -> Dict:
    """
    Cr√©e les m√©triques de voies d'administration pour la vue d'ensemble globale
    
    Args:
        route_result: R√©sultat de l'analyse des voies d'administration
        
    Returns:
        Dictionnaire avec les m√©triques format√©es
    """
    if not route_result or 'stats' not in route_result:
        return {
            'voie_inappropriee': 0,
            'voie_incompatible': 0,
            'voie_risquee': 0,
            'total_issues': 0,
            'has_critical': False
        }
    
    stats = route_result['stats']
    
    return {
        'voie_inappropriee': stats.get('voie_inappropriee_count', 0),
        'voie_incompatible': stats.get('voie_incompatible_count', 0),
        'voie_risquee': stats.get('voie_risquee_count', 0),
        'total_issues': stats.get('total_issues', 0),
        'has_critical': stats.get('has_critical_issues', False),
        'appropriate': stats.get('voie_appropriee_count', 0)
    }
